name: Code Analysis
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write
  statuses: write
  contents: write
  issues: write

jobs:
  mintify_analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up environment
        run: |
          echo "BASE_APP_URL=${{ secrets.BASE_APP_URL }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV

      # - name: Test API Call
      #   run: |
      #     # Test the API call with a sample file
      #     sample_file="sample.js"
      #     echo "console.log('Hello, World!');" > $sample_file
      #     result=$(curl -X POST "${{ env.BASE_APP_URL }}/gemini/analyze-code" \
      #       -H "Authorization: Bearer ${{ env.API_KEY }}" \
      #       -H "Content-Type: application/json" \
      #       -d "$(jq -n --arg code "$(cat $sample_file)" '{code: $code}')")
      #     echo "API Response: $result"

      - name: Get Changed Files and Run Analysis
        id: analyze_files
        if: github.event.pull_request
        run: |
          # Ensure we have the base branch
          git fetch origin ${{ github.event.pull_request.base.ref }}
          
          # Initialize results variable
          analysis_results=""
          
          # Get list of changed files
          changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.head.sha }})
          
          # Loop through each changed file
          for file in $changed_files; do
            if [[ "$file" == *.js || "$file" == *.ts || "$file" == *.yml || "$file" == *.md ]]; then
              echo "Analyzing file: $file"
              
              # Get the diff for the specific file
              diff_output=$(git diff origin/${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.head.sha }} -- "$file")
              
              if [ -n "$diff_output" ]; then
                # Format the diff as markdown
                markdown_diff="### File: \`$file\`\n\n\`\`\`diff\n${diff_output}\n\`\`\`"
                
                # Escape newlines and quotes for JSON
                escaped_diff=$(echo "$markdown_diff" | jq -sR .)
                
                # Send the formatted diff to the API
                echo "Sending request to API for $file..."
                result=$(curl -s -X POST "${{ env.BASE_APP_URL }}/gemini/analyze-code" \
                  -H "Authorization: Bearer ${{ env.API_KEY }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"code\": ${escaped_diff}}")
                
                echo "Received response from API for $file"
                
                # Add the result to analysis_results with proper formatting
                if [ -n "$result" ]; then
                  if [ -n "$analysis_results" ]; then
                    analysis_results="${analysis_results}\n\n---\n"
                  fi
                  analysis_results="${analysis_results}\n## Analysis for \`$file\`\n${result}"
                fi
              fi
            fi
          done
          
          # Save the analysis results to be used in the comment
          if [ -n "$analysis_results" ]; then
            {
              echo "ANALYSIS_RESULTS<<EOF"
              echo -e "$analysis_results"
              echo "EOF"
            } >> $GITHUB_ENV
          else
            echo "ANALYSIS_RESULTS=No changes requiring analysis were found." >> $GITHUB_ENV
          fi

      - name: Comment on Pull Request
        if: github.event.pull_request
        run: |
          # Escape the analysis results for JSON
          ESCAPED_RESULTS=$(echo "$ANALYSIS_RESULTS" | jq -sR .)
          
          # Create the comment body
          COMMENT_BODY=$(cat << EOF
          # Code Analysis Report

          ${ANALYSIS_RESULTS}

          ---
          *Generated by AI Code Analysis*
          EOF
          )
          
          # Post the comment
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": $(echo "$COMMENT_BODY" | jq -sR)}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"