name: Code Analysis
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write
  statuses: write
  contents: write
  issues: write

jobs:
  mintify_analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up environment
        run: |
          echo "BASE_APP_URL=${{ secrets.BASE_APP_URL }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV

      - name: Get Changed Files
        id: changed_files
        run: |
          git fetch origin
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          git diff --name-only --diff-filter=ACMRT origin/$BASE_BRANCH...HEAD > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

      # - name: Test API Call
      #   run: |
      #     # Test the API call with a sample file
      #     sample_file="sample.js"
      #     echo "console.log('Hello, World!');" > $sample_file
      #     result=$(curl -X POST "${{ env.BASE_APP_URL }}/gemini/analyze-code" \
      #       -H "Authorization: Bearer ${{ env.API_KEY }}" \
      #       -H "Content-Type: application/json" \
      #       -d "$(jq -n --arg code "$(cat $sample_file)" '{code: $code}')")
      #     echo "API Response: $result"
      - name: Run Deep Analysis on Changed Lines Only
        id: analyze_files
        run: |
          analysis_results=""
          while IFS= read -r file; do
            if [[ "$file" == *.js || "$file" == *.ts || "$file" == *.yml || "$file" == *.md ]]; then
              echo "Analyzing file: $file"
              
              # Get the full diff with line numbers and context
              diff_output=$(git diff origin/$BASE_BRANCH...HEAD -- "$file")
              
              # Format the diff as markdown
              markdown_diff="### File: \`$file\`\n\n\`\`\`diff\n${diff_output}\n\`\`\`"
              
              # Escape newlines and quotes for JSON
              escaped_diff=$(echo "$markdown_diff" | jq -sR .)
              
              # Send the formatted diff to the API
              echo "Sending request to API..."
              result=$(curl -s -X POST "${{ env.BASE_APP_URL }}/gemini/analyze-code" \
                -H "Authorization: Bearer ${{ env.API_KEY }}" \
                -H "Content-Type: application/json" \
                -d "{\"code\": ${escaped_diff}}")
              
              echo "Received response from API"
              
              # Add the result to analysis_results with proper formatting
              if [ -n "$result" ]; then
                analysis_results="${analysis_results}\n\n## Analysis for \`$file\`\n${result}\n---"
              fi
            fi
          done < changed_files.txt

          # Save the analysis results to be used in the comment
          echo "ANALYSIS_RESULTS<<EOF" >> $GITHUB_ENV
          echo -e "$analysis_results" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on Pull Request with Analysis Results
        if: github.event.pull_request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANALYSIS_RESULTS: ${{ env.ANALYSIS_RESULTS }}
        run: |
          if [ -z "${ANALYSIS_RESULTS}" ]; then
            echo "No analysis results to report."
          else
            # Escape the analysis results for JSON
            ESCAPED_RESULTS=$(echo "$ANALYSIS_RESULTS" | jq -sR .)
            
            # Create a formatted comment with markdown
            COMMENT_BODY=$(cat << EOF
            # Code Analysis Report

            ${ANALYSIS_RESULTS}

            ---
            *Generated by AI Code Analysis*
            EOF
            )
            
            # Post the comment
            curl -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": $(echo "$COMMENT_BODY" | jq -sR)}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          fi