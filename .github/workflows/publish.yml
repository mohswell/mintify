name: Publish Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for tag operations

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build the monorepo project
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
        run: npm run build

      - name: Ensure .next directory exists in apps/web
        run: |
          if [ ! -d "apps/web/.next" ]; then
            echo "apps/web/.next directory does not exist. Ensure the build step completes successfully."
            exit 1
          fi

      - name: Calculate Release Version
        id: version
        run: |
          # Fetch all tags first
          git fetch --tags
          
          # Get latest tag, defaulting to v0.0.0 if none exists
          latest_tag=$(git tag -l "v*" | sort -V | tail -n1 || echo "v0.0.0")
          echo "Latest tag found: $latest_tag"
          
          latest_version=${latest_tag#v}
          major=$(echo "$latest_version" | cut -d. -f1)
          minor=$(echo "$latest_version" | cut -d. -f2)
          patch=$(echo "$latest_version" | cut -d. -f3)

          # Ensure variables are set to avoid integer expression errors
          major=${major:-0}
          minor=${minor:-0}
          patch=${patch:-0}
          
          # Increment version logic
          if [ "$patch" -lt 9 ]; then
            new_patch=$((patch + 1))
            new_version="${major}.${minor}.${new_patch}"
          elif [ "$minor" -lt 9 ]; then
            new_minor=$((minor + 1))
            new_version="${major}.${new_minor}.0"
          else
            new_major=$((major + 1))
            new_version="${new_major}.0.0"
          fi
          
          echo "Calculated new version: v${new_version}"
          
          # Verify this version doesn't exist
          if git rev-parse "v${new_version}" >/dev/null 2>&1; then
            echo "Error: Calculated version v${new_version} already exists!"
            exit 1
          fi
          
          # Set the new version using environment files
          echo "new_version=${new_version}" >> $GITHUB_ENV
          # echo "::set-output name=new_version::$new_version"  # Deprecated

      - name: Get Latest Commit Message
        id: commit_message
        run: |
          latest_commit_message=$(git log -1 --pretty=%B)
          # Escape special characters for use in GitHub release
          escaped_message=$(echo "$latest_commit_message" | sed 's/"/\&quot;/g; s/'"'"'/\&apos;/g; s/\$/\\\$/g; s/\&/\&amp;/g')
          echo "commit_message=$escaped_message" >> $GITHUB_ENV

      - name: Push New Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          echo "Creating new tag: v${{ env.new_version }}"
          git tag -a "v${{ env.new_version }}" -m "Release v${{ env.new_version }}"
          git push origin "v${{ env.new_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create_release
        with:
          tag_name: v${{ env.new_version }}
          name: Release v${{ env.new_version }}
          body: ${{ env.commit_message }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create artifact for apps/web
        run: tar -czvf artifact.tar.gz apps/web/.next

      # TODO: Uncomment the following block once issues are fixed regarding null upload_url to the release asset
      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./artifact.tar.gz
      #     asset_name: artifact.tar.gz
      #     asset_content_type: application/gzip
