name: Code Analysis

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  statuses: write
  contents: write
  issues: write

jobs:
  code_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up environment
        run: |
          echo "BASE_APP_URL=${{ secrets.BASE_APP_URL }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV

      - name: Analyze Changed Files
        id: analyze_files
        run: |
          echo "Analyzing changed files..."

          # Fetch base branch for diff comparison
          git fetch origin "${{ github.event.pull_request.base.ref }}"

          analysis_results=""

          # List changed files
          changed_files=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.head.sha }})

          # Loop through each changed file
          for file in $changed_files; do
            if [[ "$file" == *.js || "$file" == *.ts || "$file" == *.yml || "$file" == *.md ]]; then
              echo "Analyzing file: $file"

              # Capture diff output
              diff_output=$(git diff origin/${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.head.sha }} -- "$file")

              if [ -n "$diff_output" ]; then
                markdown_diff="### File: \`$file\`\n\n\`\`\`diff\n${diff_output}\n\`\`\`"
                escaped_diff=$(echo "$markdown_diff" | jq -sR .)

                # Send diff to API
                result=$(curl -s -X POST "${{ env.BASE_APP_URL }}/gemini/analyze-code" \
                  -H "Authorization: Bearer ${{ env.API_KEY }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"code\": ${escaped_diff}}")

                if [ -n "$result" ]; then
                  analysis_results="${analysis_results}\n## Analysis for \`$file\`\n${result}"
                fi
              fi
            fi
          done

          # Save results for later steps
          echo "ANALYSIS_RESULTS<<EOF" >> $GITHUB_ENV
          echo -e "$analysis_results" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        run: |
          echo "Posting comment on PR..."

          COMMENT_BODY=$(cat << EOF
          # Code Analysis Report

          ${ANALYSIS_RESULTS}

          ---

          [Approve](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/#approve) | [Reject](https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }}/#reject)
          *Generated by AI Code Analysis*
          EOF
          )

          # Post the comment
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": $(echo "$COMMENT_BODY" | jq -sR)}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

      - name: Handle Feedback
        if: github.event.comment.body == '/approve' || github.event.comment.body == '/reject'
        run: |
          if [[ "${{ github.event.comment.body }}" == '/approve' ]]; then
            echo "Applying AI-generated code suggestions..."

            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Apply AI code suggestions"
            git push
          elif [[ "${{ github.event.comment.body }}" == '/reject' ]]; then
            echo "Suggestion rejected; no changes applied."
          fi
