name: Code Analysis
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  pull-requests: write
  statuses: write
  contents: write
  issues: write

jobs:
  code_analysis:
    if: |
      github.event_name != 'issue_comment' ||
      (github.event.comment.body == '/approve' ||
       github.event.comment.body == '/reject' ||
       github.event.comment.body == '/generate-tests' ||
       github.event.comment.body == '/skip-tests')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Download previous analysis data
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: analysis-data
          path: .analysis-data

      - name: Set up environment
        run: |
          echo "BASE_APP_URL=${{ secrets.BASE_APP_URL }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          # Create analysis data directory if it doesn't exist
          mkdir -p .analysis-data
          # If last_analyzed_commit doesn't exist, use base ref
          if [ ! -f .analysis-data/last_analyzed_commit ]; then
            git rev-parse ${{ github.event.pull_request.base.sha }} > .analysis-data/last_analyzed_commit
          fi
          echo "LAST_ANALYZED_COMMIT=$(cat .analysis-data/last_analyzed_commit)" >> $GITHUB_ENV

      - name: Fetch branches
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          git fetch origin ${{ github.event.pull_request.head.ref }}:refs/remotes/origin/${{ github.event.pull_request.head.ref }}

      - name: Fetch Commit History
        run: |
          if git rev-parse refs/remotes/origin/${{ github.event.pull_request.base.ref }} >/dev/null 2>&1 && \
             git rev-parse refs/remotes/origin/${{ github.event.pull_request.head.ref }} >/dev/null 2>&1; then
            # Fetch commit history and escape newlines
            commits=$(git log --pretty=format:'%H|%s|%ae|%an|%ce|%cn|%ad' \
                     refs/remotes/origin/${{ github.event.pull_request.base.ref }}..refs/remotes/origin/${{ github.event.pull_request.head.ref }} | tr '\n' ';')
          else
            echo "Unable to fetch commit history." >&2
            exit 1
          fi
          echo "COMMIT_HISTORY=$commits" >> $GITHUB_ENV

      - name: Print Commit History for debugging
        run: echo "$COMMIT_HISTORY"

      - name: Set PR Environment Variables
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "PR_AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV
          echo "PR_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "HEAD_BRANCH=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV

      - name: Fetch PR Details
        env: 
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_details=$(gh api repos/${GITHUB_REPOSITORY}/pulls/${PR_NUMBER})
          echo "PR_DRAFT=$(echo $pr_details | jq -r .draft)" >> $GITHUB_ENV
          echo "PR_LABELS=$(echo $pr_details | jq -r '.labels | map(.name) | join(",")')" >> $GITHUB_ENV
          echo "PR_REVIEWERS=$(echo $pr_details | jq -r '.requested_reviewers | map(.login) | join(",")')" >> $GITHUB_ENV
          echo "PR_ADDITIONS=$(echo $pr_details | jq -r .additions)" >> $GITHUB_ENV
          echo "PR_DELETIONS=$(echo $pr_details | jq -r .deletions)" >> $GITHUB_ENV
          echo "PR_CHANGED_FILES=$(echo $pr_details | jq -r .changed_files)" >> $GITHUB_ENV
          echo "PR_MERGEABLE=$(echo $pr_details | jq -r .mergeable)" >> $GITHUB_ENV
          echo "PR_DESCRIPTION=$(echo $pr_details | jq -r .body)" >> $GITHUB_ENV
          echo "PR_AUTHOR_USERNAME=$(echo $pr_details | jq -r .user.login)" >> $GITHUB_ENV
          echo "PR_AUTHOR_AVATAR=$(echo $pr_details | jq -r .user.avatar_url)" >> $GITHUB_ENV
          echo "PR_BASE_REPO=$(echo $pr_details | jq -r .base.repo.full_name)" >> $GITHUB_ENV
          echo "PR_HEAD_REPO=$(echo $pr_details | jq -r .head.repo.full_name)" >> $GITHUB_ENV
          echo "PR_COMMENTS=$(echo $pr_details | jq -r .comments)" >> $GITHUB_ENV
          echo "PR_CREATED_AT=$(echo $pr_details | jq -r .created_at)" >> $GITHUB_ENV
          echo "PR_UPDATED_AT=$(echo $pr_details | jq -r .updated_at)" >> $GITHUB_ENV
          echo "PR_CLOSED_AT=$(echo $pr_details | jq -r .closed_at)" >> $GITHUB_ENV
          echo "PR_MERGED_AT=$(echo $pr_details | jq -r .merged_at)" >> $GITHUB_ENV
  
      - name: Save Pull Request Metadata and user information to server
        run: |
          # Ensure all required environment variables are set
          export PR_DRAFT="${PR_DRAFT:-false}"
          export PR_LABELS="${PR_LABELS:-}"
          export PR_REVIEWERS="${PR_REVIEWERS:-}"
          export PR_COMMENTS="${PR_COMMENTS:-0}"
          export PR_ADDITIONS="${PR_ADDITIONS:-0}"
          export PR_DELETIONS="${PR_DELETIONS:-0}"
          export PR_CHANGED_FILES="${PR_CHANGED_FILES:-0}"
          export PR_MERGEABLE="${PR_MERGEABLE:-null}"
          
          bash .github/workflows/scripts/send_metadata.sh
        env:
          BASE_APP_URL: ${{ secrets.BASE_APP_URL }}
          API_KEY: ${{ secrets.API_KEY }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          PR_TITLE: ${{ env.PR_TITLE }}
          PR_AUTHOR: ${{ env.PR_AUTHOR }}
          PR_URL: ${{ env.PR_URL }}
          BASE_BRANCH: ${{ env.BASE_BRANCH }}
          HEAD_BRANCH: ${{ env.HEAD_BRANCH }}
          COMMIT_HISTORY: ${{ env.COMMIT_HISTORY }}

      - name: Analyze Changed Files
        if: github.event_name != 'issue_comment'
        run: bash .github/workflows/scripts/analyze_files.sh
        env:
          BASE_APP_URL: ${{ env.BASE_APP_URL }}
          API_KEY: ${{ env.API_KEY }}
          GITHUB_BASE_REF: ${{ github.event.pull_request.base.ref }}
          GITHUB_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          LAST_ANALYZED_COMMIT: ${{ env.LAST_ANALYZED_COMMIT }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Save analysis data
        if: github.event_name != 'issue_comment'
        uses: actions/upload-artifact@v3
        with:
          name: analysis-data
          path: .analysis-data
          retention-days: 1

      - name: Post Initial Analysis Comment
        if: github.event_name != 'issue_comment'
        run: bash .github/workflows/scripts/post_comment.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANALYSIS_RESULTS: ${{ env.ANALYSIS_RESULTS }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          RUN_ID: ${{ github.run_id }}

      - name: Process Feedback
        if: |
          github.event_name == 'issue_comment' && 
          (github.event.comment.body == '/approve' ||
           github.event.comment.body == '/reject' ||
           github.event.comment.body == '/generate-tests' ||
           github.event.comment.body == '/skip-tests')
        run: bash .github/workflows/scripts/process_feedback.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BASE_APP_URL: ${{ env.BASE_APP_URL }}
          API_KEY: ${{ env.API_KEY }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.issue.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
