// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ApiKey {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt
  apiKey      String    @unique
  status      ApiKeyStatus @default(ACTIVE)
  usageCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model User {
  id          BigInt    @id @default(autoincrement())
  email       String    @unique
  firstName   String?
  lastName    String?
  username    String?
  password    String?
  isPremium Boolean  @default(false) 
  isAdmin   Boolean  @default(false)
  isInactive Boolean @default(false)
  apiKeys     ApiKey[]
  sessions    Session[]
  pullRequests  PullRequest[]
  phone               String?
  aiUserToken         String?
  role                UserRole  @default(USER)
  maxRequestsPerDay   Int?      @default(10)
  githubRepositoryUrl String?
  registrationDate    DateTime?
  isActive            Boolean   @default(true)
  aiModelVersion      String?
  githubId   BigInt? 
  avatarUrl  String?
}

model Session {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt
  token       String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  user        User      @relation(fields: [userId], references: [id])
}

model PullRequest {
  id                BigInt   @id @default(autoincrement())
  prNumber          Int      @unique
  title             String
  description       String
  author           String
  authorUsername    String   
  authorAvatar     String   
  url              String
  baseBranch       String
  headBranch       String
  baseRepository   String   
  headRepository   String   
  status           PRStatus @default(OPEN)
  isDraft          Boolean  @default(false)
  labels           String[] 
  reviewers        String[] 
  comments         Int      
  additions        Int      
  deletions        Int     
  changedFiles     Int      
  mergeable        Boolean?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  closedAt         DateTime? 
  mergedAt         DateTime? 
  commits          Commit[]
  analyzedFiles    FileAnalysis[]
  userId           BigInt
  fileAnalysis     BigInt @default(1)
  user             User     @relation(fields: [userId], references: [id])
}

model Commit {
  id           BigInt   @id @default(autoincrement())
  commitHash   String   @unique
  message      String
  timestamp    DateTime @default(now())
  authorEmail  String
  authorName      String  
  authorUsername  String   
  committerEmail  String   
  committerName   String   
  stats          CommitStats?
  date         DateTime
  pullRequestId BigInt
  pullRequest  PullRequest @relation(fields: [pullRequestId], references: [id])
}

model CommitStats {
  id              BigInt   @id @default(autoincrement())
  additions       Int
  deletions       Int
  changedFiles    Int
  commitId        BigInt   @unique
  commit          Commit   @relation(fields: [commitId], references: [id])
}

model FileAnalysis {
  id                BigInt      @id @default(autoincrement())
  prNumber          Int
  filePath          String
  fileType          FileType
  status            FileStatus  @default(PENDING)
  additions         Int         @default(0)
  deletions         Int         @default(0)
  totalChanges      Int         @default(0)
  rawDiff           String?     
  aiAnalysisStatus  AiAnalysisStatus @default(PENDING)
  aiAnalysisResult  String?
  complexityScore   Float?
  securityIssues    Int         @default(0)
  performanceIssues Int         @default(0)
  analyzedAt        DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  pullRequestId     BigInt
  pullRequest       PullRequest @relation(fields: [pullRequestId], references: [id])
}

// Enums for additional type safety
enum ApiKeyStatus {
  ACTIVE
  REVOKED
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
  GUEST
}

enum PRStatus {
  OPEN
  MERGED
  CLOSED
}

enum FileType {
  JAVASCRIPT
  TYPESCRIPT
  MARKDOWN
  YAML
  OTHER
  CSS
  BASH
  PYTHON
  JAVA
}

enum FileStatus {
  PENDING
  ANALYZED
  SKIPPED
  ERROR
}

enum AiAnalysisStatus {
  PENDING
  COMPLETED
  FAILED
  PARTIAL
}