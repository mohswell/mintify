import { Content } from "@google/generative-ai";
import { Injectable, Logger } from "@nestjs/common";

@Injectable()
export class TestFormatterService {
  private readonly logger = new Logger(TestFormatterService.name);

  createContent(code: string): Content[] {
    return [
      {
        role: 'user',
        parts: [
          {
            text: this.formatTestGenerationPrompt(code),
          },
        ],
      },
    ];
  }

  private formatTestGenerationPrompt(code: string): string {
    const codeContent = this.extractCodeFromMarkdown(code);
    
    return `You are an expert test engineer generating comprehensive Jest/TypeScript tests.

CONTEXT:
- Use Jest testing framework
- Implement TypeScript tests
- Cover all method scenarios
- Include both happy paths and edge cases

REQUIREMENTS:
1. Test all public methods thoroughly
2. Test error handling and input validation
3. Use descriptive test names
4. Include setup and teardown logic
5. Mock dependencies where necessary

CODE TO TEST:
${codeContent}

Generate a complete test suite following these guidelines in the following format:

## Test Suite Overview
[Provide a brief overview of the test suite structure]

## Unit Tests
[Generate unit tests with the following structure for each test case:]
- Test case name and description
- Test setup (including mocks and fixtures)
- Test execution
- Assertions and verifications

## Edge Cases
[List and implement tests for edge cases]

## Integration Tests (if applicable)
[Generate integration tests where components interact]

## Test Coverage Considerations
[Highlight areas that need additional coverage]

Please generate actual test code and include detailed comments.`;
  }

  private extractCodeFromMarkdown(text: string): string {
    try {
      // More robust markdown code extraction
      const codeRegex = /```(?:typescript|js|javascript)?\n([\s\S]*?)```/;
      const match = text.match(codeRegex);
      
      return match ? match[1].trim() : text.trim();
    } catch (error) {
      this.logger.error('Error extracting code from markdown:', error);
      return text;
    }
  }

  formatResponse(testText: string): string {
    try {
      // Ensure the response is a valid test suite
      const formattedTests = testText.trim().startsWith('```') 
        ? testText 
        : `\`\`\`typescript\n${testText}\n\`\`\``;

      return `# ðŸ§ª AI Generated Test Suite

${formattedTests}

---
*Generated by AI Test Generator*`;
    } catch (error) {
      this.logger.error('Error formatting test response:', error);
      return testText;
    }
  }
}