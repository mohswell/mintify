import { Injectable, Logger } from '@nestjs/common';
import { Content } from '@google/generative-ai';

@Injectable()
export class TestFormatterService {
  private readonly logger = new Logger(TestFormatterService.name);

  createContent(code: string): Content[] {
    return [
      {
        role: 'user',
        parts: [
          {
            text: this.formatTestGenerationPrompt(code),
          },
        ],
      },
    ];
  }

  private formatTestGenerationPrompt(code: string): string {
    const codeContent = this.extractCodeFromMarkdown(code);
    
    return `As an expert test engineer, please generate comprehensive test cases for the following code:

CODE TO TEST:
${codeContent}

Please provide the test cases in the following format:

## Test Suite Overview
[Provide a brief overview of the test suite structure]

## Unit Tests
[Generate unit tests with the following structure for each test case:]
- Test case name and description
- Test setup (including mocks and fixtures)
- Test execution
- Assertions and verifications

## Edge Cases
[List and implement tests for edge cases]

## Integration Tests (if applicable)
[Generate integration tests where components interact]

## Test Coverage Considerations
[Highlight areas that need additional coverage]

Please generate actual test code using Jest/TypeScript syntax and include detailed comments.`;
  }

  private extractCodeFromMarkdown(text: string): string {
    try {
      const codeRegex = /```[\w]*\n([\s\S]*?)```/g;
      const matches = [...text.matchAll(codeRegex)];
      
      if (matches.length > 0) {
        return matches
          .map(match => match[1].trim())
          .join('\n\n=== Next Block ===\n\n');
      }
      
      return text;
    } catch (error) {
      this.logger.error('Error extracting code from markdown:', error);
      return text;
    }
  }

  formatResponse(testText: string): string {
    try {
      return `# Generated Test Suite

${testText}

---
*Tests generated by AI Test Generator*`;
    } catch (error) {
      this.logger.error('Error formatting test response:', error);
      return testText;
    }
  }
}